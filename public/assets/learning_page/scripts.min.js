(function ($) {
    $("body").append('<style id="lightbox-animations" type="text/css"></style>');
    $(document).on('change', '.chapter_dropdown', function (e) {
        var chapter_id = $(this).val();
        $(".sub_chapter_items").addClass('hide');
        $(".sub_chapter_item_id_"+chapter_id).removeClass('hide');
    });
    $(".chapter_dropdown").change();
    
    $(window).on("load", function(){
        var tab_id = getUrlParameter('quiz');
        if( tab_id != '' && tab_id != undefined && tab_id != 'undefined'){
            $('.tab-item[data-id="'+tab_id+'"]').trigger('click');
        }
    }); 

    
    $(document).on('click', '.quiz-start-btn', function (e) {
		
        var quiz_url = $(this).data('quiz_url');
		console.log(quiz_url);
        fetch(quiz_url )
        .then((response) => response.text())
        .then((html) => {
            learningPageContent.html(html);
            sort_init();
                
        })
        .catch((error) => {
            console.warn(error);
        });  
    });
    
    var getUrlParameter = function getUrlParameter(sParam) {
        var sPageURL = window.location.search.substring(1),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
            }
        }
        return false;
    };
    
    
    
    
    function open_iframe(){
        /* The position of the container will be set to fixed, so set the top & left properties of the container */ 
        var thisObj = $('.learning-content-quiz');
        var bounding_box = thisObj.get(0).getBoundingClientRect();
        thisObj.css({ top: bounding_box.top + 'px', left: bounding_box.left + 'px' });

        /* Set container to fixed position. Add animation */
        thisObj.addClass('in-animation');
        /* An empty container has to be added in place of the lightbox container so that the elements below don't come up
        Dimensions of this empty container is the same as the original container */
        $('<div id="empty-container"></div>').insertAfter(".learning-content-quiz");
        /* To animate the container from full-screen to normal, we need dynamic keyframes */
        var styles = '';
        styles = '@keyframes outlightbox {';
                styles += '0% {'; 
                styles += 'height: 100%;';
                styles += 'width: 100%;';
                styles += 'top: 0px;';
                styles += 'left: 0px;';
                styles += '}';
                styles += '50% {'; 
                styles += 'height: 200px;';
                styles += 'top: ' + bounding_box.y + 'px;';
                styles += '}';
                styles += '100% {';
                styles += 'height: 200px;';
                styles += 'width: 500px;';
                styles += 'top: ' + bounding_box.y + 'px;';
                styles += 'left: ' + bounding_box.x + 'px;';
                styles += '}';
        styles += '}';

        /* Add keyframe to CSS */
        $("#lightbox-animations").get(0).sheet.insertRule(styles, 0);

        /* Hide the window scrollbar */
        $("body").css('overflow', 'hidden');
        $("#close").fadeIn();
    }
    
    /* Click on close button when full-screen */
    $(document).on('click', '#close', function (e) {
            $("#close").hide();

            /* Window scrollbar normal */
            $("body").css('overflow', 'auto');

            /* Show animation */
            $(".learning-content-quiz").addClass('out-animation');
            $(".learning-content-quiz").html('');
            $(".learning-content-quiz").removeClass('out-animation');
            $(".learning-content-quiz").removeClass('in-animation');
            

            e.stopPropagation();
    });

    /* On animationend : from normal to full screen & full screen to normal */
    $(".learning-content-quiz").on('animationend', function(e) {
        /* On animation end from normal to full-screen */
        if(e.originalEvent.animationName == 'inlightbox') {
            $("#close").show();
        }
        /* On animation end from full-screen to normal */
        else if(e.originalEvent.animationName == 'outlightbox') {
            /* Remove fixed positioning, remove animation rules */
            $(".learning-content-quiz").removeClass('in-animation').removeClass('out-animation');

            /* Remove the empty container that was earlier added */
            $("#empty-container").remove();

            /* Delete the dynamic keyframe rule that was earlier created */
            $("#lightbox-animations").get(0).sheet.deleteRule(0);
        }
    });
    
    
    
    
    $('body').on('click', '.panel-file-manager', function (e) {
        e.preventDefault();
        $(this).filemanager('file', {prefix: '/laravel-filemanager'});
    });

    const learningPageContent = $('#learningPageContent');

    // disable right click
    // document.addEventListener('contextmenu', event => event.preventDefault(), false);

    $(document).ready(function () {
        const allItems = $('.tab-item');

        if (allItems && allItems.length && defaultItemType && defaultItemType !== '' && defaultItemId && defaultItemId !== '') {
            for (const item of allItems) {
                const $item = $(item);
                const type = $item.attr('data-type');
                const id = $item.attr('data-id');

                if (type === defaultItemType && id === defaultItemId) {
                    $item.trigger('click');

                    const collapse = $item.closest('.collapse');

                    if (collapse) {
                        collapse.collapse('show');
                    }
                }
            }
        } else if (allItems && loadFirstContent && loadFirstContent !== 'false') {
			var sub_chapter_item_id = getUrlParameter('chapter');
			const allItems = $('.sub_chapter_item_id_'+sub_chapter_item_id).find('.tab-item');
            if (allItems.length) {
				
                const item = allItems[0];

                const $item = $(item);
				

                $item.trigger('click');

                const collapse = $item.closest('.collapse');

                if (collapse) {
                    collapse.collapse('show');
                }
            } else {
                contentEmptyStateHtml();
            }
        }
    });


    $('body').on('click', '#collapseBtn', function () {
        const $tabs = $('.learning-page-tabs');

        $tabs.toggleClass('show');
    });

    if ($(window).width() < 992) {
        $('.learning-page-tabs').removeClass('show')
    }

    $('body').on('click', '.nav-item a', function () {
        const $tabs = $('.learning-page-tabs');

        if (!$tabs.hasClass('show')) {
            $tabs.addClass('show');
        }
    });

    $('body').on('click', '.tab-item', function () {
        const $this = $(this);

        if (!$this.hasClass('active')) {
            const type = $this.attr('data-type');
            const id = $this.attr('data-id');

            //
            $('.tab-item-info').slideUp();
            $('.tab-item').removeClass('active');
            $('.certificate-item').removeClass('active');

            $this.addClass('active');
            $this.find('.tab-item-info').slideDown();

            if ($(window).width() < 992) {
                $('.learning-page-tabs').removeClass('show')
            }

            if (type !== 'assignment') {
                addContentLoading();
                handleContent(id, type);
            }
        }
    });

    $('body').on('click', '#checkAgainSession', function () {
        const $this = $(this);

        const type = $this.attr('data-type');
        const id = $this.attr('data-id');

        addContentLoading();

        handleContent(id, type);
    });

    $('body').on('click', '.certificate-item', function () {
        const $this = $(this);

        $('.certificate-item').removeClass('active');
        $('.tab-item').removeClass('active');
        $this.addClass('active');

        const result = $this.attr('data-result');

        handleDownloadCertificateHtml(result);
    });


    function handleContent(itemId, itemType) {

        const data = {
            type: itemType,
            id: itemId,
        };

        $.post('/course/learning/itemInfo', data, function (result) {
            if (itemType === 'session') {
                const {session} = result;

                if (session) {
                    if (session.is_finished) {
                        handleLiveSessionFinishedHtml(session);
                    } else if (session.is_started) {
                        handleLiveSessionHtml(session);
                    } else {
                        handleLiveSessionNotStartedHtml(session);
                    }
                }
            } else if (itemType === 'file') {
                handleFileHtml(result.file); // if file is downloadable
            } else if (itemType === 'text_lesson') {
                handleTextLessonHtml(result.textLesson);
            } else if (itemType === 'quiz') {
                handleQuizHtml(result.quiz);
            }
        });
    }


    function handleDownloadCertificateHtml(result) {

        const title = downloadCertificateLang;
        const hint = enjoySharingYourCertificateWithOthersLang;
        const img = 'quiz.svg';

        let otherHtml = '';

        if (result && result !== '') {
            otherHtml = `
                <a href="/panel/quizzes/results/${result}/showCertificate" target="_blank" class="btn btn-primary btn-sm mt-15">${downloadLang}</a>
            `;
        } else {
            otherHtml = `
                <button type="button" disabled class="btn btn-primary btn-sm mt-15">${downloadLang}</button>
            `;
        }

        const html = handleContentBoxHtml(title, hint, img, otherHtml);

        learningPageContent.html(html);
    }

    function handleQuizHtml(quiz) {

        const title = quiz.title;
        const hint = goToTheQuizPageForMoreInformationLang;
        const img = 'quiz.svg';

        let otherHtml = '';

        if (quiz.can_try) {
            
            /*otherHtml = `
                <a href="/panel/quizzes/${quiz.id}/start" target="_blank" class="btn btn-primary btn-sm mt-15">${quizPageLang}</a>
            `;*/
            
            otherHtml = `
                <a href="javascript:;" data-quiz_url="/panel/quizzes/${quiz.id}/start" class="quiz-start-btn btn btn-primary btn-sm mt-15">Start Quiz</a>
                <div class="learning-content-quiz"></div>
            `;
        } else {
            otherHtml = `
                <button type="button" class="js-cant-start-quiz-toast btn btn-primary btn-sm mt-15 disabled">${quizPageLang}</button>
            `;
        }

        const html = handleLearningContentBoxHtml(title, hint, img, otherHtml);
         const page_link = `
                /panel/quizzes/${quiz.id}/start
            `;
        
        /*const html = `
                <iframe src="/panel/quizzes/${quiz.id}/start" style="width: 100%;border: none;height: 500px;"></iframe>
            `;*/
            
          /* console.log(page_link);
        fetch(page_link )
        .then((response) => response.text())
        .then((html) => {
            learningPageContent.html(html);
            sort_init();
                
        })
        .catch((error) => {
            console.warn(error);
        });  
		*/		
            
        learningPageContent.html(html);
    }

    function handleLiveSessionFinishedHtml(session) {

        const title = sessionIsFinishedLang;
        const hint = sessionIsFinishedHintLang;
        const img = 'live_session.svg';
        const otherHtml = `
                <a href="${courseUrl}" class="btn btn-white btn-sm mt-15">${coursePageLang}</a>
        `;

        const html = handleContentBoxHtml(title, hint, img, otherHtml, 'mt-10');

        learningPageContent.html(html);
    }

    function handleLiveSessionNotStartedHtml(session) {

        const title = sessionIsNotStartedYetLang;
        const hint = thisSessionWillBeStartedOnLang + ' ' + session.start_data;
        const img = 'live_session.svg';
        const otherHtml = `
            <div class="d-flex align-items-center mt-15">
                <button type="button" id="checkAgainSession" data-type="session" data-id="${session.id}" class="btn btn-primary btn-sm ">${checkAgainLang}</button>
                <a href="${courseUrl}" class="btn btn-white btn-sm ml-10">${coursePageLang}</a>
            </div>
        `;

        const html = handleContentBoxHtml(title, hint, img, otherHtml, 'mt-10');

        learningPageContent.html(html);
    }

    function handleLiveSessionHtml(session) {

        const title = sessionIsLiveLang;
        const hint = youCanJoinTheLiveNowLang;
        const img = 'live_session.svg';
        const otherHtml = `
            <div class="d-flex align-items-center mt-15">
                <a href="${session.join_url}" target="_blank" class="btn btn-primary btn-sm ">${joinTheClassLang}</a>
                <a href="${courseUrl}" class="btn btn-white btn-sm ml-10">${coursePageLang}</a>
            </div>
        `;

        const html = handleContentBoxHtml(title, hint, img, otherHtml, 'mt-10');

        learningPageContent.html(html);
    }

    function handleFileHtml(file) {

        if ((file.online_viewer && file.online_viewer !== '0') || (file.downloadable && file.downloadable !== '0')) {
            let html = '';

            if ((file.online_viewer && file.online_viewer !== '0')) {
                html +=`<div class="d-flex flex-column p-10 h-100">`;

                html += `<iframe src="/ViewerJS/index.html#${file.file_path}" class="file-online-viewer rounded-sm ${(file.downloadable && file.downloadable !== '0') ? 'has-download-card' : ''}" frameborder="0" allowfullscreen></iframe>`;

                if ((file.downloadable && file.downloadable !== '0')) {
                        html += `<div class="d-flex align-items-center justify-content-between rounded-sm mt-15 p-15 border-dashed-gray300">
                                <span class="font-weight-bold text-dark">${downloadTheFileLang}</span>
                                <a href="${courseUrl}/file/${file.id}/download" class="btn btn-primary btn-sm" target="_blank">${downloadLang}</a>
                            </div>`;
                }

                html +=`</div>`;

            } else if ((file.downloadable && file.downloadable !== '0')) {
                const title = downloadTheFileLang;
                const hint = file.title;
                const img = 'download.svg';
                const otherHtml = `<a href="${courseUrl}/file/${file.id}/download" class="btn btn-primary btn-sm mt-15" target="_blank">${downloadLang}</a>`;

                html += handleContentBoxHtml(title, hint, img, otherHtml);
            }

            learningPageContent.html(html);
        } else {
            switch (file.storage) {
                case 'upload':
                case 'youtube':
                case 'vimeo':
                case 'external_link':
                case 's3':

                    const $html = $('<div class="learning-content-video-player w-100"></div>');

                    learningPageContent.html($html);

                    handleVideoByFileId(file.id, $html, function () {

                    });

                    break;

                case 'google_drive':
                case 'iframe':
                    handleFileIframe(file.id);
                    break;
                case 'upload_archive':
                    const title = showHtmlFileLang;
                    const hint = file.title;
                    const img = 'download.svg';
                    const otherHtml = `<a href="${courseUrl}/file/${file.id}/showHtml" target="_blank" class="btn btn-primary btn-sm mt-15">${showLang}</a>`;

                    const html = handleContentBoxHtml(title, hint, img, otherHtml);

                    learningPageContent.html(html);
                    break;
            }

        }
    }

    function handleTextLessonHtml(textLesson) {
        let html = `<div class="text-lesson-content p-15 p-lg-30">
                    <h4 class="font-16 font-weight-bold text-dark">${textLesson.title}</h4>
                    <div class="pb-5 mt-15 main-image rounded-lg w-100">
                        <img src="${textLesson.image}" class="img-cover bg-gray200" alt="${textLesson.title}"/>
                    </div>

                    ${textLesson.content}
                </div>`;

        if (textLesson.attachments && Object.keys(textLesson.attachments).length) {
            html += `<div class="shadow-sm rounded-lg bg-white px-15 px-md-25 py-20 mt-20">
                    <h3 class=" font-16 font-weight-bold text-dark-blue">${attachmentsLang}</h3>

                    <div class="row mt-10">
                    `;

            Object.keys(textLesson.attachments).forEach(key => {
                const attachment = textLesson.attachments[key];

                html += `<div class="col-12 col-lg-3 mt-10 mt-lg-0">
                            <a href="${courseUrl}/file/${attachment.file.id}/download" class="d-flex align-items-center p-10 border border-gray200 rounded-sm">
                                <span class="chapter-icon bg-gray300 mr-10">
                                    <i data-feather="download-cloud" class="text-gray" width="16" height="16"></i>
                                </span>

                                <div class="">
                                    <span class="font-weight-500 font-14 text-dark-blue d-block">${attachment.file.title}</span>
                                    <span class="font-12 text-gray d-block">${attachment.file.file_type} | ${attachment.file.volume}</span>
                                </div>
                            </a>
                    </div>`;
            });

            html += `</div>
                </div>`;

        }

        learningPageContent.html(html);

        feather.replace();
    }
    
    function handleLearningContentBoxHtml(title, hint, img, html = null, titleClassName = null) {
        return `<div class="learning-title">
                        <h3 class="mb-5">${title}</h3>
                        <span class="font-12 font-weight-400 text-gray">${hint}</span>
                    </div>
                    <div class="d-flex align-items-center justify-content-center w-100">
                    <button id="collapseBtn" type="button" class="btn-transparent ml-auto ml-lg-20">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
                    </button>
                    <div class="learning-content-box d-flex align-items-center justify-content-center flex-column p-15 p-lg-30 rounded-lg">
                        <div class="learning-content-box-icon">
                            <img src="/assets/default/img/learning/${img}" alt="downloadable icon">
                        </div>
                        ${html ?? ''}
                    </div>
                </div>`
            ;
    }

    function handleContentBoxHtml(title, hint, img, html = null, titleClassName = null) {
        return `<div class="d-flex align-items-center justify-content-center w-100 h-100">
                    <button id="collapseBtn" type="button" class="btn-transparent ml-auto ml-lg-20">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
                    </button>
                    <div class="learning-content-box d-flex align-items-center justify-content-center flex-column p-15 p-lg-30 rounded-lg">
                        <div class="learning-content-box-icon">
                            <img src="/assets/default/img/learning/${img}" alt="downloadable icon">
                        </div>

                        <h4 class="font-16 font-weight-bold text-dark ${titleClassName ?? ''}">${title}</h4>

                        <span class="font-14 font-weight-500 text-gray mt-5">${hint}</span>

                        ${html ?? ''}
                    </div>
                </div>`
            ;
    }

    function addContentLoading() {
        const html = `<div class="learning-content-loading d-flex align-items-center justify-content-center flex-column w-100 h-100">
            <img src="/assets/default/img/loading.gif" alt="">
            <p class="mt-10">${pleaseWaitForTheContentLang}</p>
        </div>`;

        learningPageContent.html(html);
    }

    function contentEmptyStateHtml() {
        const html = `<div class="learning-page-forum-empty d-flex align-items-center justify-content-center flex-column">
            <div class="learning-page-forum-empty-icon d-flex align-items-center justify-content-center">
                <img src="/assets/default/img/learning/content-empty.svg" class="img-fluid" alt="">
            </div>

            <div class="d-flex align-items-center flex-column mt-10 text-center">
                <h3 class="font-20 font-weight-bold text-dark-blue text-center">${learningPageEmptyContentTitleLang}</h3>
                <p class="font-14 font-weight-500 text-gray mt-5 text-center">${learningPageEmptyContentHintLang}</p>
            </div>
        </div>`;

        learningPageContent.html(html);
    }

    function handleFileIframe(fileId) {
        $.post('/course/getFilePath', {file_id: fileId}, function (result) {

            if (result && result.code === 200) {
                const {storage, path} = result;

                const $iframeHtml = `<div class="learning-content-iframe">
                            ${path}
                        </div>`;

                learningPageContent.html($iframeHtml);
            } else {
                $.toast({
                    heading: notAccessToastTitleLang,
                    text: notAccessToastMsgLang,
                    bgColor: '#f63c3c',
                    textColor: 'white',
                    hideAfter: 10000,
                    position: 'bottom-right',
                    icon: 'error'
                });
            }
        }).fail(err => {
            $.toast({
                heading: notAccessToastTitleLang,
                text: notAccessToastMsgLang,
                bgColor: '#f63c3c',
                textColor: 'white',
                hideAfter: 10000,
                position: 'bottom-right',
                icon: 'error'
            });
        });
    }

    $('body').on('change', '.js-passed-lesson-toggle', function (e) {
        const $this = $(this);
        const course_id = $this.val();
        const item = $this.attr('data-item');
        const item_id = $this.attr('data-item-id');
        const status = this.checked;

        const data = {
            item: item,
            item_id: item_id,
            status: status
        };

        $.post('/course/' + course_id + '/learningStatus', data, function (result) {
            $.toast({
                heading: '',
                text: learningToggleLangSuccess,
                bgColor: '#43d477',
                textColor: 'white',
                hideAfter: 10000,
                position: 'bottom-right',
                icon: 'success'
            });

            setTimeout(() => {
                window.location.reload();
            }, 500);
        }).fail(err => {
            $this.prop('checked', !status);

            $.toast({
                heading: '',
                text: learningToggleLangError,
                bgColor: '#f63c3c',
                textColor: 'white',
                hideAfter: 10000,
                position: 'bottom-right',
                icon: 'error'
            });
        });
    });

    $('body').on('click', '.js-sequence-content-error-modal', function (e) {
        e.preventDefault();

        const passedError = $(this).attr('data-passed-error');
        const accessDaysError = $(this).attr('data-access-days-error');

        let html = '<ul class="list-group-custom">\n';
        if (passedError) {
            html += '<li class="font-14 mb-10">' + passedError + '</li>\n';
        }

        if (accessDaysError) {
            html += '<li class="font-14">' + accessDaysError + '</li>\n';
        }

        html += '</ul>';

        Swal.fire({
            icon: 'error',
            title: sequenceContentErrorModalTitle,
            html: html,
            showCancelButton: false,
            showConfirmButton: false,
            customClass: {
                content: 'p-0 text-left',
            },
            width: '30rem',
        });
    });

    $('body').on('click', '.js-save-history-message', function () {
        const $this = $(this);
        const $form = $this.closest('form');
        const action = $form.attr('action');
        const data = $form.serializeObject();

        $this.addClass('loadingbar primary').prop('disabled', true);

        $form.find('.invalid-feedback').text('');
        $form.find('.is-invalid').removeClass('is-invalid');

        $.post(action, data, function (result) {
            if (result && result.code === 200) {
                Swal.fire({
                    icon: 'success',
                    html: '<h3 class="font-20 text-center text-dark-blue">' + sendAssignmentSuccessLang + '</h3>',
                    showConfirmButton: false,
                });

                setTimeout(() => {
                    window.location.reload();
                }, 500);
            } else if (result && result.code === 401) {
                $.toast({
                    heading: result.errors.title,
                    text: result.errors.msg,
                    bgColor: '#f63c3c',
                    textColor: 'white',
                    hideAfter: 10000,
                    position: 'bottom-right',
                    icon: 'error'
                });

                $this.removeClass('loadingbar primary').prop('disabled', false);
            }
        }).fail(err => {
            $this.removeClass('loadingbar primary').prop('disabled', false);
            var errors = err.responseJSON;
            if (errors && errors.errors) {
                Object.keys(errors.errors).forEach((key) => {
                    const error = errors.errors[key];
                    let element = $form.find('[name="' + key + '"]');
                    element.addClass('is-invalid');
                    element.parent().find('.invalid-feedback').text(error[0]);
                });
            }
        });
    })

    $('body').on('click', '.js-save-history-rate', function () {
        const $this = $(this);
        const $form = $this.closest('form');
        const action = $form.attr('action');
        const data = $form.serializeObject();

        $this.addClass('loadingbar primary').prop('disabled', true);

        $form.find('.invalid-feedback').text('');
        $form.find('.is-invalid').removeClass('is-invalid');

        $.post(action, data, function (result) {
            if (result && result.code === 200) {
                Swal.fire({
                    icon: 'success',
                    html: '<h3 class="font-20 text-center text-dark-blue">' + saveAssignmentRateSuccessLang + '</h3>',
                    showConfirmButton: false,
                });

                setTimeout(() => {
                    window.location.reload();
                }, 500);
            } else if (result && result.code === 401) {
                $.toast({
                    heading: result.errors.title,
                    text: result.errors.msg,
                    bgColor: '#f63c3c',
                    textColor: 'white',
                    hideAfter: 10000,
                    position: 'bottom-right',
                    icon: 'error'
                });

                $this.removeClass('loadingbar primary').prop('disabled', false);
            }
        }).fail(err => {
            $this.removeClass('loadingbar primary').prop('disabled', false);
            var errors = err.responseJSON;
            if (errors && errors.errors) {
                Object.keys(errors.errors).forEach((key) => {
                    const error = errors.errors[key];
                    let element = $form.find('[name="' + key + '"]');
                    element.addClass('is-invalid');
                    element.parent().find('.invalid-feedback').text(error[0]);
                });
            }
        });
    });

    function errorToast(heading, text) {
        $.toast({
            heading: heading,
            text: text,
            bgColor: '#f63c3c',
            textColor: 'white',
            hideAfter: 10000,
            position: 'bottom-right',
            icon: 'error'
        });
    }

    $('body').on('click', '.js-not-access-toast', function (e) {
        e.preventDefault();

        if (notAccessToastTitleLang && notAccessToastMsgLang) {
            errorToast(notAccessToastTitleLang, notAccessToastMsgLang);
        }
    });

    $('body').on('click', '.js-cant-start-quiz-toast', function (e) {
        e.preventDefault();

        if (cantStartQuizToastTitleLang && cantStartQuizToastMsgLang) {
            errorToast(cantStartQuizToastTitleLang, cantStartQuizToastMsgLang);
        }
    });
})(jQuery);

function chimp_utf8encode(string) {
    string = string.replace(/\x0d\x0a/g, "\x0a");
    var output = "";
    for (var n = 0; n < string.length; n++) {
        var c = string.charCodeAt(n);
        if (c < 128) {
            output += String.fromCharCode(c);
        } else if ((c > 127) && (c < 2048)) {
            output += String.fromCharCode((c >> 6) | 192);
            output += String.fromCharCode((c & 63) | 128);
        } else {
            output += String.fromCharCode((c >> 12) | 224);
            output += String.fromCharCode(((c >> 6) & 63) | 128);
            output += String.fromCharCode((c & 63) | 128);
        }
    }
    return output;
}

function chimp_encode64(input) {
    var keyString = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;
    input = chimp_utf8encode(input);
    while (i < input.length) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;
        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
            enc4 = 64;
        }
        output = output + keyString.charAt(enc1) + keyString.charAt(enc2) + keyString.charAt(enc3) + keyString.charAt(enc4);
    }
    return output;
}
function chimp_utf8decode(input) {
    var string = "";
    var i = 0;
    var c = 0, c1 = 0, c2 = 0;
    while (i < input.length) {
        c = input.charCodeAt(i);
        if (c < 128) {
            string += String.fromCharCode(c);
            i++;
        } else if ((c > 191) && (c < 224)) {
            c2 = input.charCodeAt(i + 1);
            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            i += 2;
        } else {
            c2 = input.charCodeAt(i + 1);
            c3 = input.charCodeAt(i + 2);
            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }
    }
    return string;
}
function chimp_decode64(input) {
    var keyString = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    while (i < input.length) {
        enc1 = keyString.indexOf(input.charAt(i++));
        enc2 = keyString.indexOf(input.charAt(i++));
        enc3 = keyString.indexOf(input.charAt(i++));
        enc4 = keyString.indexOf(input.charAt(i++));
        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }
    }
    output = chimp_utf8decode(output);
    return output;
}



$(document).on('click', '.lms-quest-btn', function (e) {
    $(this).closest('.question-step').find('.question-layout-block').removeClass('hide');
    $(this).closest('.questions-data-block').find('.right-content').removeClass('hide');
    $(this).closest('.question-fail-block').remove();
    $(".question-area").html($(".question-area-temp").html());
});

var quiz_user_data	= [];
quiz_user_data[0] = {};
quiz_user_data[0]['attempt'] = {};
quiz_user_data[0]['incorrect'] = {};
quiz_user_data[0]['correct'] = {};

$(document).on('click', '.submit-btn', function (e) {
    
    var question_data = [];
    question_data[0] = {};
    var appricate_words_array = ['Wonderful','Excellent','Brilliant','Fantastic','Spectacular','Gorgeous','Exceptional','Marvelous','Extrodinary']
    var appricate_word = appricate_words_array[Math.floor(Math.random()*appricate_words_array.length)];
    var appricate_colors_array = ['red','orange','blue','green']
    var appricate_color = appricate_colors_array[Math.floor(Math.random()*appricate_colors_array.length)];
    var thisObj = $(this);
	var attempt_id = $(".question-area .question-step").attr('data-qattempt');
	var quiz_result_id = $(".question-area .question-step").attr('data-quiz_result_id');
    
    
    var total_elapsed_time = $(".range-price").attr('data-time_elapsed');
    var start_time = thisObj.closest('.question-step').attr('data-start_time');
    var time_consumed = parseInt(total_elapsed_time) - parseInt(start_time);
    
    var question_no = $(this).attr('data-question_no');
    var total_questions = thisObj.closest('.questions-data-block').attr('data-total_questions');
    var thisForm = $(this).closest('form');
    var question_id = $(this).closest('form').data('question_id');
    var question_layout = thisForm.find('.question-layout').html();
    $('.question-all-good').remove();
    $(this).closest('form').find('.editor-field').each(function() {
        $(this).removeClass('validate-error');
        var field_name = $(this).attr('name');
        var field_id = $(this).attr('id');
        var field_identifier = field_id;
        var field_identifier = field_identifier.replace(/field-/g, '');
        var field_type = $(this).attr('type');
        var field_value = $(this).val();
        
        if( field_type == 'text'){
            question_data[0][field_identifier] = field_value;
            
        }else if( field_type == 'checkbox' || field_type == 'radio'){
            var field_identifier = field_name.replace(/field-/g, '');
            var field_value = $("input[name='"+field_name+"']:checked").map(function(){
                return $(this).val();
            }).get();
            
            question_data[0][field_identifier] = field_value;
            $('#checkbox_id:checked').val();
            
        }else{
            question_data[0][field_identifier] = field_value;
        }
        
    });
	question_data_array = question_data;
    question_data = chimp_encode64(JSON.stringify(question_data));
    quiz_user_data[0]['attempt'][question_id] = question_data_array;
    var qresult_id = thisObj.closest('.question-step').attr('data-qresult');
    var qattempt_id = thisObj.closest('.question-step').attr('data-qattempt');
	
     jQuery.ajax({
            type: "POST",
            url: '/question/validation',
            dataType: 'json',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: {"question_id": question_id, "question_data": question_data, "qresult_id": qresult_id, "qattempt_id": qattempt_id, "time_consumed": time_consumed},
            success: function (return_data) {
                if( return_data.incorrect_flag == true){
                    
                    
                    
                    var question_response_layout = return_data.question_response_layout;
                    if(question_response_layout != ''){
                            var question_response_layout = return_data.question_response_layout;
                            $(".question-area-temp").html(question_response_layout);
                    }
                    
                    
                    
                    
                    
                    
                    
                    var question_result_id  = return_data.question_result_id;
                    thisObj.closest('.question-step').attr('data-qresult', question_result_id);
                    
                    
                    quiz_user_data[0]['incorrect'][question_id] = question_data_array;
					
					
                    var correct_answers_html = '';
                    var user_answers_html = '';
                    $.each(return_data.incorrect_array, function(field_id, value){
                        thisForm.find('#field-'+field_id).addClass('validate-error');
                        $.each(value.correct, function(correct_index, correct_value){
                            correct_answers_html += '<li><label class="lms-question-label" for="radio2"><span>'+correct_value+'</span></label></li>';
                        });
                        $.each(value.user_input, function(user_index, user_value){
                            user_answers_html += '<li><label class="lms-question-label" for="radio2"><span>'+user_value+'</span></label></li>';
                        });
                        
                    });
                    var fail_page_link = '/panel/questions/'+question_id+'/fail';
                    fetch(fail_page_link )
                    .then((response) => response.text())
                    .then((html) => {
                        thisObj.closest('.question-step').append(html);
                        thisObj.closest('.question-step').find('.lms-explanation-block').html(question_layout);
                        thisObj.closest('.question-step').find('.lms-explanation-block').find('.editor-field').attr('disabled', 'disabled');
                        thisObj.closest('.question-step').find('.lms-explanation-block').find('.editor-field').attr('readonly', 'readonly');
                        thisObj.closest('.question-step').find('.lms-explanation-block').find('.editor-field').attr('name', 'disable_name');
                        thisObj.closest('.question-step').find('.lms-explanation-block').find('.marks').remove();
                        thisObj.closest('.question-step').find('.lms-explanation-block').find('label').attr('for', 'disable_for');
                        thisObj.closest('.question-step').find('.lms-correct-answer-block').html(correct_answers_html);
                        thisObj.closest('.question-step').find('.lms-user-answer-block').html(user_answers_html);
                        thisObj.closest('.question-layout-block').addClass('hide');
                        thisObj.closest('.questions-data-block').find('.right-content').addClass('hide');
                    })
                    .catch((error) => {
                        console.warn(error);
                    });    
                    
                    
                    thisForm.find('.form-btn').append('<span class="question-all-good">All Not Good</span>');
                }else{
					
                    quiz_user_data[0]['correct'][question_id] = question_data_array;
					
                    var marks_count = thisForm.find('.marks').attr('data-marks');
                    var marks_counter = 1;
                    var markscoin_html = '';
                    if( marks_count > 0){
                        while (marks_counter <= marks_count) {
                            console.log(marks_counter);
                            markscoin_html  += '<div class="markscoin">';
                            marks_counter++;
                        }
                        
                    }
                     $btn = $('.coin-marks-label');
                        var $coin = $(markscoin_html)
                        .insertAfter($btn)
                        .css({
                            "left": 150,
                            "top": 105
                        })
                        .animate({
                            "top": 93,
                            "left": 390
                        }, 1000, function() {
                            $coin.remove();
                            var points_value = $(".range-value-count span").html();
                            var points_value = parseInt(points_value)+parseInt(marks_count);
                            $(".range-value-count span").html(points_value);
                            $("#range").val(points_value);
                        });
                            
                    thisForm.find('.form-btn').append('<span class="question-all-good">All Good</span>');
                    var next_question_no = parseInt(question_no) + 1;


                    thisObj.closest('.questions-data-block').find('.question-fields').hide();
                    thisObj.closest('.questions-data-block').find('.correct-appriciate').html(appricate_word);
                    thisObj.closest('.questions-data-block').find('.correct-appriciate').addClass(appricate_color);
                    thisObj.closest('.questions-data-block').find('.correct-appriciate').show(300).delay(2000).hide(300);

                    var question_response_layout = return_data.question_response_layout;
                    if(question_response_layout != ''){
                            $(".question-step").css({display:"none"}).hide().animate({opacity:0});
                            thisObj.closest('.questions-data-block').find('.question-fields').show(2500);
                            $(".question-step.question-step-"+next_question_no).css({display:"block"}).show(3000).animate({opacity:1});

                            var question_response_layout = return_data.question_response_layout;
                            $(".question-area").html(question_response_layout);

                            var total_elapsed_time = $(".range-price").attr('data-time_elapsed');
                            $(".question-step").attr('data-start_time', total_elapsed_time);

                    }else{
                            thisObj.closest('.questions-data-block').find('.right-content').addClass('hide');
                            $(".quiz-complete").show(2000);

                            console.log('test complete1');
                            console.log(quiz_result_id);
                            quiz_user_data = chimp_encode64(JSON.stringify(quiz_user_data));
                            //quiz_user_data = JSON.stringify(quiz_user_data);
                            jQuery.ajax({
                                    type: "POST",
                                    url: '/question/test_complete',
                                    headers: {
                                            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                                    },
                                    data: {"attempt_id": attempt_id, "quiz_result_id": quiz_result_id, "quiz_user_data": quiz_user_data},
                                    success: function (return_data) {
                                            console.log(return_data);
                                            $(".quiz-complete").css({display:"block"}).show(10).animate({opacity:1});
                                            $(".quiz-complete").find(".question-layout").html(return_data);
                                            $(".quiz-complete").children().unbind('click');
                                    }
                            });
                    }
						
                }
            }
    });
        
});
function sort_init(){
    jQuery('.question-layout').find(".lms-sorting-fields").each(function () {
        var this_id = $(this).attr('id');
        new Sortable(this_id, {
            animation: 150
        });
    });   
}

/***********************************
Left Sidebar Menu Toggle Function
***********************************/
$(window).on("load", function() {
    if ($(".panel-sidebar .sidebarNavToggle").length != "") {
        $(".panel-sidebar .sidebarNavToggle").click(function(){ 
            $("body").toggleClass("menu-closed"); 
        });
    } 
});
/***********************************
Right Sidebar Menu Toggle Function
***********************************/
$(window).on("load", function() {
    if ($(".lms-content-header .tab-toggle-btn").length != "") {
        $(".lms-content-header .tab-toggle-btn").click(function(){
            $("body").toggleClass("right-menu-closed");
        });
    }
}); 

$(document).on('click', '.icon-img', function (e) {
    $btn = $('.coin-marks-label');
    var $coin = $('<div class="markscoin">')
        .insertAfter($btn)
        .css({
            "left": 150,
            "top": 105
        })
        .animate({
            "top": 93,
            "left": 390
        }, 1000, function() {
            //$coin.remove();
        });
});